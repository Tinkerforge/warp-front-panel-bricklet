#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
from PIL import Image
import time
import defines

pixel_values_565 = []
pixel_values_565_8bit = []
count = 0

font_list_h      = "// Don't edit this file. It is automatically generated by make_flash_map.py.\n\n"
font_defines_h   = "// Don't edit this file. It is automatically generated by make_flash_map.py.\n\n"
sprite_list_h    = "// Don't edit this file. It is automatically generated by make_flash_map.py.\n\n"
sprite_defines_h = "// Don't edit this file. It is automatically generated by make_flash_map.py.\n\n"

while True:
    try:
        im = Image.open('fonts/{0}.png'.format(count), 'r')
        print('Reading font {0}.png:'.format(count))
    except:
        print('Done. Found {0} fonts.'.format(count))
        print('')
        print('')
        break
    width, height = im.size
    pixel_values = list(im.getdata())
    position = len(pixel_values_565_8bit)
    for value in pixel_values:
        try:
            # RGB pixel
            r = value[0] >> 3
            g = value[1] >> 2
            b = value[2] >> 3
        except:
            # Greyscale pixel
            r = value >> 3
            g = value >> 2
            b = value >> 3
        rgb565 = (r<<11) | (g<<5) | b
        pixel_values_565.append(rgb565)
        pixel_values_565_8bit.append(rgb565 & 0xFF)
        pixel_values_565_8bit.append(rgb565 >> 8)
    # Remove first block from font list (first block is only for easy trim)
    font_list_h    += '{{{0}, {1}, {2}}}, // {3}\n'.format(position + 2*width*height//129, width, height//129, defines.FONTS[count])
    font_defines_h += '#define FONT_{0} {1}\n'.format(defines.FONTS[count], count)
    print(' define:   {0}'.format(defines.FONTS[count]))
    print(' position: {0}'.format(position))
    print('')

    count += 1

count = 0
while True:
    try:
        im = Image.open('sprites/{0}.png'.format(count), 'r')
        print('Reading sprite {0}.png:'.format(count))
    except:
        print('Done. Found {0} sprites.'.format(count))
        print('')
        print('')
        break
    width, height = im.size
    pixel_values = list(im.getdata())
    position = len(pixel_values_565_8bit)
    for value in pixel_values:
        try:
            # RGB pixel
            r = value[0] >> 3
            g = value[1] >> 2
            b = value[2] >> 3
        except:
            # Greyscale pixel
            r = value >> 3
            g = value >> 2
            b = value >> 3
        rgb565 = (r<<11) | (g<<5) | b
        pixel_values_565.append(rgb565)
        pixel_values_565_8bit.append(rgb565 & 0xFF)
        pixel_values_565_8bit.append(rgb565 >> 8)
    sprite_list_h    += '{{{0}, {1}, {2}}}, // {3}\n'.format(position, width, height, defines.SPRITES[count])
    sprite_defines_h += '#define SPRITE_{0} {1}\n'.format(defines.SPRITES[count], count)
    print(' define:   {0}'.format(defines.SPRITES[count]))
    print(' position: {0}'.format(position))
    print(' width:    {0}'.format(width))
    print(' height:   {0}'.format(height))
    print('')

    count += 1

# Make 256 byte aligned (one page)
missing_bytes = len(pixel_values_565_8bit) % 256
if missing_bytes > 0:
    for _ in range(256 - missing_bytes):
        pixel_values_565_8bit.append(0)

with open('flash_map.bin', 'wb') as f:
    f.write(bytes(pixel_values_565_8bit))
    print('Save data as flash_map.bin')

def remove_last_comma(s):
    pos = s.rfind(',')
    return s[0:pos] + s [pos+1:]

with open('font_list.h', 'w') as f:
    print('Save font list font_list.h')
    f.write(remove_last_comma(font_list_h))

with open('font_defines.h', 'w') as f:
    print('Save font defines font_defines.h')
    f.write(font_defines_h)

with open('sprite_list.h', 'w') as f:
    print('Save sprite list sprite_list.h')
    f.write(remove_last_comma(sprite_list_h))

with open('sprite_defines.h', 'w') as f:
    print('Save sprite defines sprite_defines.h')
    f.write(sprite_defines_h)
